{
  "openapi": "3.0.0",
  "info": {
    "title": "Compass Users API",
    "description": "The Compass test API to manipulate Client CRUD via REST",
    "termsOfService": "http://localhost:3000/terms",
    "contact": {
      "email": "brcesar19@gmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/v1",
      "description": "Development API environment"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "summary": "Create a new User",
        "description": "Endpoint to create a new User",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Error trying to create a new User"
          },
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/user/id/{id}": {
      "get": {
        "summary": "Find user by id",
        "description": "Endpoint to get user by id",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Error trying to find user"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update username by id",
        "description": "Endpoint to edit user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Error trying to update user"
          },
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a user by id",
        "description": "Endpoint to delete user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Error trying to delete user"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/user/fullname/{fullname}": {
      "get": {
        "summary": "Find a user by fullname",
        "description": "Endpoint to get a user by fullname",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "fullname",
            "in": "path",
            "description": "user fullname",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "User not found"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cities": {
      "post": {
        "summary": "Create a new city",
        "description": "Endpoint to create a new City",
        "tags": [
          "Cities"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/City"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Error trying to create a new User"
          },
          "201": {
            "description": "City created",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/City"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cities/name/{name}": {
      "get": {
        "summary": "Create a new city",
        "description": "Endpoint to get city by name",
        "tags": [
          "Cities"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "city name",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Error trying to find city"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/City"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cities/state/{state}": {
      "get": {
        "summary": "Find cities by state",
        "description": "Endpoint to find cities by state",
        "tags": [
          "Cities"
        ],
        "parameters": [
          {
            "name": "state",
            "in": "path",
            "description": "state",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Error trying to find city"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/City"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string"
          },
          "age": {
            "type": "number"
          },
          "genre": {
            "type": "string"
          },
          "birthdate": {
            "type": "string",
            "format": "date-time"
          },
          "cityId": {
            "type": "string"
          }
        },
        "required": [
          "fullname",
          "age",
          "genre",
          "birthdate"
        ]
      },
      "City": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "state"
        ]
      }
    }
  }
}